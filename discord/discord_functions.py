
from json_functions import *
from discord import File
import datetime
from lock import *
import threading

max_changes=4

def get_author_roles(author):
    # Extract and return the roles of the author
    result=None
    try:
        result=author.roles
    except:
        result=None
    return result


async def send_message(message, user_message, u_id=None,isTrial=False):
    global max_changes
    lock=GlobalLocks().global_lock
    print(lock)
    try:
        if u_id and len(u_id)>0:
            author=str(message.author)
            user_id=str(message.author.id)
            isValid=True
            with lock:
                premium_dict=load_user_data(target_file='data_ninjatrader.json')
                if isTrial:
                    keys_to_remove = []
                    for key, nested_dict in premium_dict.items():
                        if 'user_id' in nested_dict and nested_dict['user_id'] == user_id:
                            keys_to_remove.append(key)
                            break
                    if len(keys_to_remove)>0 or u_id in premium_dict:
                        response='I apologize, but it seems that you have already subscribed to AutoTrader (Trial) in the past. If you have any inquiries, please feel free to contact the server administrator.'
                        await message.author.send(content=response)
                    else:
                        current_time = datetime.datetime.now()
                        current_time_str = current_time.strftime('%Y-%m-%d %H:%M:%S')
                        temp_dict={'username':author,'user_id':user_id,'isTrial':isTrial,'isValid':isValid,'timestamp':current_time_str,'changes':0,'isSpecial':False}
                        premium_dict[u_id]=temp_dict
                        save_user_data(premium_dict,target_file='data_ninjatrader.json')
                        response='Here is your Trial AutoTrader (NinjaTrader) file'
                        file = File("trial_test.txt")
                        await message.author.send(content=response, file=file)
                else:
                    changes=0
                    #check that if there is u_id in the dict, and if yes, check the author message and the use r id stored are the same, because otherwise soemthing is not righ.
                    if u_id in premium_dict:
                        if premium_dict[u_id]['user_id']!=user_id:
                            response='I apologize, but it seems that you are not the same user associated to the given unique id. If you have any inquiries, please feel free to contact the server administrator.'
                            await message.author.send(content=response)
                            return
                    
                    #check the many chnages by the user_id
                    target_key=None
                    for key, nested_dict in premium_dict.items():
                        if 'user_id' in nested_dict and nested_dict['user_id'] == user_id:
                            target_key=key
                            break
                    if target_key:
                        temp_dict=premium_dict[target_key]
                        changes=temp_dict['changes']

                        if changes+1>=max_changes:
                            response='I apologize, but it seems that you tried to change your unique id too many times. If you have any inquiries, please feel free to contact the server administrator.'
                            await message.author.send(content=response)
                            return
                        premium_dict.pop(target_key)

                    current_time = datetime.datetime.now()
                    current_time_str = current_time.strftime('%Y-%m-%d %H:%M:%S')
                    changes=changes+1

                    temp_dict={'username':author,'user_id':user_id,'isTrial':isTrial,'isValid':isValid,'timestamp':current_time_str,'changes':changes,'isSpecial':False}
                    premium_dict[u_id]=temp_dict
                    save_user_data(premium_dict,target_file='data_ninjatrader.json')
                    response='Here is your AutoTrader (NinjaTrader) file'
                    file = File("test.txt")
                    await message.author.send(content=response, file=file)
        else:
            response='Please write ? then followed by your unique id generated by the program. No spam/chat is allowed here. Thank you.'
            await message.delete()
            await message.channel.send(content=response)

    except Exception as e:
        print(e)

async def set_item_invalid(after):
    lock=GlobalLocks().global_lock
    print(lock)
    try:
        if after:
            #author=str(after.author)
            user_id=str(after.id)
            # get json file
            with lock:
                premium_dict=load_user_data(target_file='data_ninjatrader.json')

                for key, nested_dict in premium_dict.items():
                    if 'user_id' in nested_dict and nested_dict['user_id'] == user_id:
                        target_key=key
                        break
                
                if target_key in premium_dict:
                    temp_dict=premium_dict[target_key]
                    temp_dict['isValid']=False
                    temp_dict['changes']=0
                    premium_dict[target_key]=temp_dict

                save_user_data(premium_dict,target_file='data_ninjatrader.json')

    except Exception as e:
        print(e)